#!/usr/bin/env php
<?php

/**
 * @file
 * PHP CLI script to check if shell script variables are wrapped in ${VAR}.
 *
 * Environment variables:
 * - SCRIPT_QUIET: Set to '1' to suppress verbose messages.
 * - SCRIPT_RUN_SKIP: Set to '1' to skip running of the script. Useful when
 *   unit-testing or requiring this file from other files.
 *
 * Usage:
 * @code
 * # Check if all variables are wrapped.
 * php shell-var-lint <file>
 *
 * # Fix any unwrapped variables.
 * php shell-var-lint <file> --fix
 * @endcode
 *
 * phpcs:disable Drupal.Commenting.InlineComment.SpacingBefore
 * phpcs:disable Drupal.Commenting.InlineComment.SpacingAfter
 * phpcs:disable DrupalPractice.Commenting.CommentEmptyLine.SpacingAfter
 */

/**
 * Main functionality.
 *
 * @param array<string> $argv
 *   Array of arguments.
 * @param int $argc
 *   Number of arguments.
 *
 * @throws \Exception
 * @SuppressWarnings(PHPMD.CyclomaticComplexity)
 * @SuppressWarnings(PHPMD.NPathComplexity)
 * @SuppressWarnings(PHPMD.UnusedFormalParameter)
 */
function main(array $argv, int $argc): void {
  $options = getopt('hf', ['help', 'fix']);

  if (isset($options['h']) || isset($options['help']) || in_array('-?', $argv)) {
    print_help();

    return;
  }

  $filename = $argv[1] ?? NULL;

  if (empty($filename)) {
    throw new \Exception('Please provide a file to check.');
  }

  $lines = @file($filename);
  if ($lines === FALSE) {
    throw new \Exception(sprintf('Unable to read file "%s".', $filename));
  }

  $should_replace = isset($options['f']) || isset($options['fix']) || in_array('-f', $argv) || in_array('--fix', $argv);

  $processed_lines = [];
  $should_fail = FALSE & !$should_replace;
  $changed_count = 0;
  foreach ($lines as $k => $line) {
    $updated_line = process_line($line);

    if ($updated_line != $line) {
      if ($should_replace) {
        verbose('Replaced in line %s: %s', $k, $line);
        $line = $updated_line;
      }
      else {
        verbose('%s: %s', $k, $line);
        $should_fail = TRUE;
      }
      $changed_count++;
    }

    $processed_lines[] = $line;
  }

  if ($changed_count > 0 && $should_replace) {
    file_put_contents($filename, implode('', $processed_lines));
    verbose('Replaced %s variables in file "%s".', $changed_count, $filename);
  }

  if ($should_fail) {
    throw new \Exception(sprintf('Found %s variables in file "%s" that are not wrapped in ${}.', $changed_count, $filename));
  }
}

/**
 * Process a line.
 *
 * @param string $line
 *   The line to process.
 *
 * @return string
 *   The processed line.
 *
 * @SuppressWarnings(PHPMD.CyclomaticComplexity)
 * @SuppressWarnings(PHPMD.NPathComplexity)
 * @SuppressWarnings(PHPMD.UnusedLocalVariable)
 */
function process_line(string $line): string {
  if (empty($line)) {
    return $line;
  }

  if (str_starts_with(trim($line), '#')) {
    return $line;
  }

  // Find and replace non-escaped variables.
  $updated_line = preg_replace_callback('/(?<!\\\\)\$[a-zA-Z_][a-zA-Z0-9_]*/', function ($matches) use ($line) {
    $value = $matches[0][0];
    $pos = $matches[0][1];

    // Only replace within interpolation context.
    if (is_numeric($pos) && is_interpolation($line, (int) $pos)) {
      $value = '${' . substr($value, 1) . '}';
    }

    return $value;
  }, $line, -1, $count, PREG_OFFSET_CAPTURE);

  return $updated_line ?: $line;
}

/**
 * Check if the line at position is within interpolation context.
 *
 * This implementation has explicit statements to make it easier to understand
 * and maintain.
 *
 * @param string $line
 *   The line to check.
 * @param int $pos
 *   The position of the variable.
 *
 * @return bool
 *   TRUE if the line at position is within interpolation context.
 *
 * @SuppressWarnings(PHPMD.CyclomaticComplexity)
 */
function is_interpolation(string $line, int $pos): bool {
  // Normalize position.
  $pos = max($pos - 1, 0);

  $prev = $line[$pos] ?? '';
  $prefix = substr($line, 0, $pos);

  if (empty($prev)) {
    return FALSE;
  }

  // Find previous single or double quote.
  for ($i = $pos; $i >= 0; $i--) {
    $char = $line[$i] ?? '';
    if ($char == '"' || $char == '\'') {
      $prev = $char;
      break;
    }
  }

  $double_even = substr_count($prefix, '"') % 2 == 0;
  $single_even = substr_count($prefix, '\'') % 2 == 0;

  if ($prev == '"') {
    if ($double_even) {
      return TRUE;
    }
  }

  if ($prev == '\'') {
    // Prev interpolation is closed - this is a new one.
    if ($double_even) {
      // New non-interpolation.
      if ($single_even) {
        return FALSE;
      }

      return FALSE;
    }
    else {
      // Still within open interpolation.
      if ($single_even) {
        return TRUE;
      }

      return TRUE;
    }
  }

  return TRUE;
}

/**
 * Print help.
 */
function print_help(): void {
  $script_name = basename(__FILE__);
  $out = <<<EOF
Check if shell script variables are wrapped in \${} and fix violations.
------------------------

Arguments:
  file                The file to check.

Options:
  --help              This help.
  --fix               If the script should fix the variables in file.

Examples:
  php $script_name path/to/file

EOF;
  verbose($out);
}


/**
 * Show a verbose message and record messages into internal buffer.
 *
 * @param string $string
 *   Message to print.
 * @param bool|float|int|string|null ...$args
 *   Arguments to sprintf() the message.
 *
 * @return array<string>
 *   Array of messages.
 */
function verbose(string $string, ...$args): array {
  $string = sprintf($string, ...$args);

  static $buffer = [];
  $buffer[] = $string;
  if (empty(getenv('SCRIPT_QUIET'))) {
    // @codeCoverageIgnoreStart
    print end($buffer);
    // @codeCoverageIgnoreEnd
  }

  return $buffer;
}

// Entrypoint.
//
// @codeCoverageIgnoreStart
ini_set('display_errors', 1);

if (PHP_SAPI != 'cli' || !empty($_SERVER['REMOTE_ADDR'])) {
  die('This script can be only ran from the command line.');
}

// Allow to skip the script run.
if (getenv('SCRIPT_RUN_SKIP') != 1) {
  set_error_handler(function (int $severity, string $message, string $file, int $line): bool {
    if (!(error_reporting() & $severity)) {
      // This error code is not included in error_reporting - continue
      // execution with the normal error handler.
      return FALSE;
    }
    throw new ErrorException($message, 0, $severity, $file, $line);
  });

  try {
    // The function should not provide an exit code but rather throw exceptions.
    main($argv, $argc);
  }
  catch (\ErrorException $exception) {
    if ($exception->getSeverity() <= E_USER_WARNING) {
      verbose(PHP_EOL . 'RUNTIME ERROR: ' . $exception->getMessage() . PHP_EOL);
      exit($exception->getCode() == 0 ? 1 : $exception->getCode());
    }
  }
  catch (\Exception $exception) {
    verbose(PHP_EOL . 'ERROR: ' . $exception->getMessage() . PHP_EOL);
    exit($exception->getCode() == 0 ? 1 : $exception->getCode());
  }
}
// @codeCoverageIgnoreEnd
